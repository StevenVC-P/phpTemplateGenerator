# agents/template_engineer/template_engineer.py
import json
from pathlib import Path

class TemplateEngineer:
    def __init__(self, config=None):
        self.config = config or {}

    def load_json(self, path):
        try:
            with open(path, 'r') as file:
                return json.load(file)
        except Exception as e:
            print(f"‚ùå Failed to load {path}: {e}")
            return None

    def generate_php_template(self, prompt_data, design_data):
        """Generate a professional, modern PHP template"""
        system_context = prompt_data.get("system_prompt", "")
        user_request = prompt_data.get("user_prompt", "")
        layout = design_data.get("layout_structure", {})
        colors = design_data.get("color_palette", {})
        typography = design_data.get("typography_scheme", {})

        # Extract design details
        hero_style = layout.get("hero", {}).get("name", "centered_hero")
        color_strategy = design_data.get("color_palette_strategy", "monochromatic")
        typography_pairing = typography.get("pairing", {})
        heading_font = typography_pairing.get("heading", "Inter")
        body_font = typography_pairing.get("body", "Inter")

        # Generate modern CSS with proper styling
        css = self.generate_modern_css(colors, typography, layout)

        # Generate structured HTML content
        html_content = self.generate_structured_html(hero_style, typography_pairing)

        return f"""<?php
// Professional PHP Template - Generated by AI Agents
// Design Strategy: {color_strategy}
// Typography: {heading_font} + {body_font}
// Layout: {hero_style}
?><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Professional service page for local business">
    <title>Professional Service Page</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family={heading_font.replace(' ', '+')}:wght@400;600;700&family={body_font.replace(' ', '+')}:wght@400;500&display=swap" rel="stylesheet">
    <style>
{css}
    </style>
</head>
<body>
{html_content}
</body>
</html>
"""

    def generate_modern_css(self, colors, typography, layout):
        """Generate modern, professional CSS"""
        typography_pairing = typography.get("pairing", {})
        heading_font = typography_pairing.get("heading", "Inter")
        body_font = typography_pairing.get("body", "Inter")

        # Generate color palette from design data
        primary_color = "#2563eb"  # Default blue
        accent_color = "#f59e0b"   # Default orange
        text_color = "#1f2937"     # Dark gray
        bg_color = "#ffffff"       # White

        return f"""        /* Reset and Base Styles */
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: '{body_font}', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: {text_color};
            background-color: {bg_color};
        }}

        /* Typography */
        h1, h2, h3, h4, h5, h6 {{
            font-family: '{heading_font}', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            font-weight: 600;
            line-height: 1.2;
            margin-bottom: 1rem;
        }}

        h1 {{ font-size: 3rem; font-weight: 700; }}
        h2 {{ font-size: 2.25rem; }}
        h3 {{ font-size: 1.875rem; }}
        p {{ margin-bottom: 1rem; font-size: 1.125rem; }}

        /* Layout */
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }}

        /* Header */
        .header {{
            background: linear-gradient(135deg, {primary_color} 0%, #1d4ed8 100%);
            color: white;
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}

        .nav {{
            display: flex;
            justify-content: space-between;
            align-items: center;
        }}

        .logo {{
            font-size: 1.5rem;
            font-weight: 700;
        }}

        /* Hero Section */
        .hero {{
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 4rem 0;
            text-align: center;
        }}

        .hero h1 {{
            color: {text_color};
            margin-bottom: 1.5rem;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }}

        .hero p {{
            font-size: 1.25rem;
            color: #64748b;
            max-width: 600px;
            margin: 0 auto 2rem;
        }}

        /* Buttons */
        .btn {{
            display: inline-block;
            padding: 1rem 2rem;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 600;
            font-size: 1.125rem;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }}

        .btn-primary {{
            background: linear-gradient(135deg, {accent_color} 0%, #ea580c 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(245, 158, 11, 0.3);
        }}

        .btn-primary:hover {{
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(245, 158, 11, 0.4);
        }}

        /* Services Section */
        .services {{
            padding: 4rem 0;
            background: white;
        }}

        .services-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 3rem;
        }}

        .service-card {{
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 25px rgba(0,0,0,0.08);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border: 1px solid #e2e8f0;
        }}

        .service-card:hover {{
            transform: translateY(-5px);
            box-shadow: 0 8px 35px rgba(0,0,0,0.12);
        }}

        .service-card h3 {{
            color: {primary_color};
            margin-bottom: 1rem;
        }}

        /* Contact Section */
        .contact {{
            background: linear-gradient(135deg, {primary_color} 0%, #1d4ed8 100%);
            color: white;
            padding: 4rem 0;
            text-align: center;
        }}

        .contact h2 {{
            color: white;
            margin-bottom: 1rem;
        }}

        .contact p {{
            margin-bottom: 2rem;
            opacity: 0.9;
        }}

        /* Footer */
        .footer {{
            background: #1f2937;
            color: white;
            padding: 2rem 0;
            text-align: center;
        }}

        /* Responsive Design */
        @media (max-width: 768px) {{
            h1 {{ font-size: 2.25rem; }}
            h2 {{ font-size: 1.875rem; }}
            .hero {{ padding: 2rem 0; }}
            .services {{ padding: 2rem 0; }}
            .contact {{ padding: 2rem 0; }}
            .services-grid {{
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }}
        }}"""

    def generate_structured_html(self, hero_style, typography_pairing):
        """Generate structured, professional HTML content"""
        return """    <!-- Header -->
    <header class="header">
        <div class="container">
            <nav class="nav">
                <div class="logo">Your Business</div>
                <div class="nav-links">
                    <a href="#services" style="color: white; text-decoration: none; margin-left: 2rem;">Services</a>
                    <a href="#contact" style="color: white; text-decoration: none; margin-left: 2rem;">Contact</a>
                </div>
            </nav>
        </div>
    </header>

    <!-- Hero Section -->
    <section class="hero">
        <div class="container">
            <h1>Professional Service Solutions</h1>
            <p>We provide exceptional service to help your business grow and succeed in today's competitive market.</p>
            <a href="#contact" class="btn btn-primary">Get Started Today</a>
        </div>
    </section>

    <!-- Services Section -->
    <section class="services" id="services">
        <div class="container">
            <h2 style="text-align: center; margin-bottom: 1rem;">Our Services</h2>
            <p style="text-align: center; color: #64748b; margin-bottom: 3rem;">Comprehensive solutions tailored to your needs</p>

            <div class="services-grid">
                <div class="service-card">
                    <h3>Consultation</h3>
                    <p>Expert advice and strategic planning to help you make informed decisions for your business growth.</p>
                </div>

                <div class="service-card">
                    <h3>Implementation</h3>
                    <p>Professional execution of solutions with attention to detail and commitment to excellence.</p>
                </div>

                <div class="service-card">
                    <h3>Support</h3>
                    <p>Ongoing assistance and maintenance to ensure your continued success and satisfaction.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Contact Section -->
    <section class="contact" id="contact">
        <div class="container">
            <h2>Ready to Get Started?</h2>
            <p>Contact us today for a free consultation and discover how we can help your business succeed.</p>
            <a href="tel:555-555-5555" class="btn" style="background: white; color: #2563eb; margin-right: 1rem;">Call (555) 555-5555</a>
            <a href="mailto:info@yourbusiness.com" class="btn" style="background: rgba(255,255,255,0.2); color: white; border: 2px solid white;">Send Email</a>
        </div>
    </section>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>&copy; <?php echo date('Y'); ?> Your Business. All rights reserved.</p>
        </div>
    </footer>"""

    async def run(self, input_file: str, pipeline_id: str):
        """Standard agent interface for orchestrator"""
        from dataclasses import dataclass
        from typing import Dict
        from datetime import datetime

        @dataclass
        class AgentResult:
            agent_id: str
            success: bool
            output_file: str = ""
            error_message: str = ""
            execution_time: float = 0.0
            metadata: Dict = None

        try:
            # For template_engineer, input_file should be the prompt file
            prompt_path = Path(input_file)

            # Look for design variation file in the same template directory
            template_dir = prompt_path.parent.parent
            design_files = list(template_dir.glob("design_variations/design_variation_*.json"))

            if not design_files:
                return AgentResult(
                    agent_id="template_engineer",
                    success=False,
                    error_message="No design variation file found"
                )

            design_path = design_files[0]  # Use the first design variation

            # Generate output path
            template_id = pipeline_id.replace('pipeline_', '')
            output_path = template_dir / f"templates/template_{template_id}.php"

            # Load data
            prompt_data = self.load_json(prompt_path)
            design_data = self.load_json(design_path)

            if not prompt_data or not design_data:
                return AgentResult(
                    agent_id="template_engineer",
                    success=False,
                    error_message="Failed to load prompt or design data"
                )

            # Generate PHP template
            php_code = self.generate_php_template(prompt_data, design_data)

            # Write output
            output_path.parent.mkdir(parents=True, exist_ok=True)
            output_path.write_text(php_code, encoding='utf-8')

            print(f"‚úÖ PHP template written to {output_path}")

            return AgentResult(
                agent_id="template_engineer",
                success=True,
                output_file=str(output_path),
                metadata={"template_id": template_id}
            )

        except Exception as e:
            return AgentResult(
                agent_id="template_engineer",
                success=False,
                error_message=str(e)
            )

    def run_legacy(self, prompt_path, design_path, output_path) -> bool:
        """Legacy method for backward compatibility"""
        prompt_data = self.load_json(prompt_path)
        design_data = self.load_json(design_path)

        if not prompt_data or not design_data:
            return False

        php_code = self.generate_php_template(prompt_data, design_data)

        output_path = Path(output_path)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        output_path.write_text(php_code)

        print(f"‚úÖ PHP template written to {output_path}")
        return True
